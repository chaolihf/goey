before_script: &before_script_all
  - cat /etc/*-release || true
  - if [ -x "$(command -v go)" ]; then go version; fi;
  - if [ -n "$APT_GET" ]; then apt-get update -qq -y; apt-get install -qq -y --no-install-recommends $APT_GET; fi;
  - if [ -n "$DISPLAY" ]; then Xvfb $DISPLAY -screen 0 1024x768x24 & fi;
  - if [ -x "$(command -v fluxbox)" ]; then mkdir -p ~/.fluxbox; echo "session.screen0.toolbar.enable:false" > ~/.fluxbox/init; fluxbox -v; fluxbox 2> /dev/null & fi;

golang-gtk-modules:
  image: "golang:${GOVERSION}"
  stage: build
  variables:
    DISPLAY: ":1"
    APT_GET: "libgtk-3-dev xvfb"
  script:
    - go build -v . ./example/...
    - go test -v ./base ./loop ./dialog ./windows .
  parallel:
    matrix:
      - GOVERSION: ["1.11", "1.12", "1.13", "1.14", "1.15", "1.16", "1.17"]
        DUMMY: ["dummy"]

golang-gtk-gopath:
  image: "golang:${GOVERSION}"
  stage: build
  variables:
    GOPATH: $CI_BUILDS_DIR
    GIT_CLONE_PATH: $CI_BUILDS_DIR/src/github.com/chaolihf/goey
    DISPLAY: ":1"
    APT_GET: "libgtk-3-dev xvfb"
  script:
    - go get -v github.com/chaolihf/goey/base github.com/chaolihf/goey/loop
    - go get -v github.com/chaolihf/goey/example/...
    - go build -v github.com/chaolihf/goey github.com/chaolihf/goey/example/...
    - go test ./base ./loop ./dialog ./windows .
  parallel:
    matrix:
      - GOVERSION: ["1.8", "1.9", "1.10"]
        DUMMY: ["dummy"]

golang-js:
  image: "golang:${GOVERSION}"
  stage: build
  variables:
    APT_GET: "chromium"
    GOOS: js
    GOARCH: wasm
    GOBIN: $CI_BUILDS_DIR/bin
    EXAMPLES: "onebutton twofields threebuttons colour decoration controls"
  script:
    - GOOS= GOARCH= go get github.com/agnivade/wasmbrowsertest@latest
    - GOOS= GOARCH= go install github.com/agnivade/wasmbrowsertest
    - ln $GOBIN/wasmbrowsertest $GOBIN/go_js_wasm_exec
    - PATH=$PATH:$GOBIN
    - go build -v . ./example/...
    - unset $(env | grep CI_ | awk -F= '{print $1}') # See https://github.com/golang/go/issues/49011
    - unset $(env | grep GITLAB_ | awk -F= '{print $1}') # See https://github.com/golang/go/issues/49011
    - go test -v -run Test ./base ./loop ./windows .
    - for elem in $EXAMPLES; do
    -   mkdir -p ./public/${elem}
    -   cp `go env GOROOT`/misc/wasm/wasm_exec.js ./public/${elem}/
    -   cp ./example/jswasm/index.html ./public/${elem}/
    -   go build -o ./public/${elem}/main.wasm ./example/${elem}
    - done
  parallel:
    matrix:
      - GOVERSION: ["1.14", "latest"]
        DUMMY: ["dummy"]
  artifacts:
    paths:
      - public/

golang-windows:
  stage: build
  tags:
    - windows
    - windows-1809
  before_script:
    - go version
  script:
    - go build . ./example/...
    - go test ./base ./loop ./windows . -v

golang-cocoa:
  image: "golang:${GOVERSION}"
  stage: build
  variables:
    DISPLAY: ":1"
    APT_GET: "gnustep-devel xvfb"
  script:
    - go build -v -tags cocoa . ./example/...
    - go test -v -tags cocoa ./base ./loop ./windows .
  parallel:
    matrix:
      - GOVERSION: ["1.12", "latest"]
        DUMMY: ["dummy"]

nix-all:
  image: nixos/nix
  stage: build
  script:
    - nix-env -iA nixpkgs.xvfb-run nixpkgs.fluxbox
    - xvfb-run -n 99 fluxbox &
    - export DISPLAY=:99
    - nix-shell --pure --argstr platform ${PLATFORM} --command "cd ${CI_PROJECT_DIR}; go build -v ./base ./loop ./windows . ./example/..."
    - nix-shell --pure --argstr platform ${PLATFORM} --command "cd ${CI_PROJECT_DIR}; go build -v ./base ./loop ./windows . ./example/..." ./shell-pinned.nix
    - if [ $PLATFORM == "js" ]; then
    -   nix-shell --pure --argstr platform ${PLATFORM} --command "cd ${CI_PROJECT_DIR}; go test -v -short -run=Test ./base ./loop ./windows ."
    - elif [ $PLATFORM == "windows" ]; then
    -   timeout 30s nix-shell --keep DISPLAY --argstr platform ${PLATFORM} --command "wineboot --update" || true
    -   nix-shell --keep DISPLAY --argstr platform ${PLATFORM} --command "cd ${CI_PROJECT_DIR}; go test -v -short ./base ./loop ./windows ."
    - else
    -   nix-shell --pure --keep DISPLAY --argstr platform ${PLATFORM} --command "cd ${CI_PROJECT_DIR}; go test -v -short ./base ./loop ./windows ."
    - fi
  parallel:
    matrix:
      - PLATFORM: ["gtk", "windows", "js"]
        DUMMY: ["dummy"]

test-gtk:
  image: golang:latest
  stage: test
  needs: []
  variables:
    GOPATH: $CI_BUILDS_DIR
    GIT_CLONE_PATH: $CI_BUILDS_DIR/src/github.com/chaolihf/goey
    DISPLAY: ":1"
    APT_GET: "libgtk-3-dev xvfb"
    SCREENSHOTS: "onebutton twofields threebuttons decoration colour"
    LINTERS: "ineffassign,misspell,gosec,godot,govet,revive"
  before_script:
    - *before_script_all
    - mkdir -p .cache/github.com
    - mv .cache/github.com $GOPATH/src/
  after_script:
    - mv $GOPATH/src/github.com .cache/
  script:
    - go build -v . ./example/...
    - go test -v -coverprofile=cover-gtk.out ./base ./loop ./dialog ./windows .
    - go tool cover -html=cover-gtk.out -o=cover.html
    - go test -v -race -count=10 ./loop 
    - go vet -composites=false ./base ./loop ./dialog .
    - go install github.com/client9/misspell/cmd/misspell@latest
    - $GOPATH/bin/misspell -locale US *.go *.md base/*.go loop/*.go dialog/*.go
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- v1.42.0
    - ./bin/golangci-lint run -v --enable=$LINTERS ./base ./loop ./dialog ./goeytest .
    - mkdir ./images
    - for elem in $SCREENSHOTS; do go build -v github.com/chaolihf/goey/example/$elem; done
    - for elem in $SCREENSHOTS; do GOEY_SCREENSHOT=./images/${elem}_linux.png ./$elem; done
  cache:
    key: test
    paths:
      - .cache/github.com/
  except:
    - tags
  artifacts:
    paths:
      - cover.html
      - cover-gtk.out
      - images/

test-wine64:
  image: golang:latest
  stage: test
  needs: []
  variables:
    DISPLAY: ":1"
    APT_GET: "wine64 wine-binfmt xvfb"
    GOOS: windows
    LINTERS: "ineffassign,misspell,gosec,godot,govet,revive"
  script:
    - go build -v . ./example/...
    - go test -v -exec wine64 -short -coverprofile=cover-wine64.out ./base ./loop ./windows .
    - go tool cover -html=cover-wine64.out -o=cover.html
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- v1.42.0
    - ./bin/golangci-lint run -v --enable=$LINTERS ./base ./loop ./dialog .
  except:
    - tags
  artifacts:
    paths:
      - cover.html
      - cover-wine64.out

test-windows:
  stage: test
  needs: ["golang-windows"]
  tags:
    - windows
    - windows-1809
  before_script:
    - go version
  script:
    - go build . ./example/...
    - go test -v -coverprofile="cover-windows.out" ./base ./loop ./windows .
    - go test -v -race -count=10 ./loop 
  except:
    - tags
  artifacts:
    paths:
      - cover.html
      - cover-windows.out

test-cocoa:
  image: golang:latest
  stage: test
  needs: []
  variables:
    DISPLAY: ":1"
    APT_GET: "gnustep-devel xvfb fluxbox"
    LINTERS: "ineffassign,misspell,gosec,godot,govet,revive"
  script:
    - go test -v -tags cocoa -coverprofile=cover-cocoa.out ./base ./loop ./windows .
    - go tool cover -html=cover-cocoa.out -o=cover.html
    - go test -v -tags cocoa -race -count=10 ./loop 
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- v1.42.0
    - ./bin/golangci-lint run -v --enable=$LINTERS --build-tags=cocoa ./base ./loop .
  except:
    - tags
  artifacts:
    paths:
      - cover.html
      - cover-cocoa.out

lint:
  image: golang:latest
  stage: test
  needs: []
  script:
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- v1.40.0
    - ./bin/golangci-lint run -v --enable-all --disable wsl --issues-exit-code=0 .
  except:
    - tags
  allow_failure: true

pages:
  stage: deploy
  needs: ["test-gtk", "golang-js: [latest, dummy]"]
  script:
    - mkdir -p ./public
    - mv cover.html ./public
    - mv images/*.png ./public
  only:
    - master
  artifacts:
    paths:
      - public
